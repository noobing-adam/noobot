const { QuickDB } = require("quick.db");
const db = new QuickDB();
const { SlashCommandBuilder } = require("@discordjs/builders")
const Discord = require("discord.js")
let Embed = require("../tools/embed.js")
this.fighting = new Set();
module.exports = {
category: "Oyun",
data: new SlashCommandBuilder()
  .setName("dÃ¼ello")
  .setDescription("Biriyle savaÅŸ yaparsÄ±nÄ±z.")
.addUserOption(option =>
		option
			.setName('kiÅŸi')
			.setDescription('SavaÅŸmak istediÄŸiniz kiÅŸi.')
      .setRequired(true)
)
.addIntegerOption(option =>
    option
      .setName("can")
      .setDescription("DÃ¼elloda canÄ±nÄ±nÄ±zÄ±n olacaÄŸÄ±nÄ± belirlersiniz. (default: 500 & min = 100 & max = 3000)")
      .setMaxValue(3000)
      .setMinValue(100)
)
,execute: async(interaction, client) => { 
letÂ errÂ =Â (e)Â =>Â interaction.reply({embeds:[Embed(":x:Â BirÂ hataÂ ileÂ karÅŸÄ±laÅŸÄ±ldÄ±.Â :x:",e,"error")],ephemeral:true}).catch(err => {})
let dÃ¶n = 0
let ekveri = ""  
	let opponent = interaction.options.getUser("kiÅŸi")
  let can = interaction.options.getInteger("can") ? Number(interaction.options.getInteger("can")) : 500
  if (opponent.id == interaction.user.id) return err('Kendin ile dÃ¼ello atamazsÄ±n!');
		if (this.fighting.has(interaction.channel.id)) err('Kanal baÅŸÄ±na sadece bir dÃ¼ello meydana gelebilir.');
		this.fighting.add(interaction.channel.id);
		try {
			if (!opponent.bot) {
let yes = new Discord.ButtonBuilder().setStyle("Success").setLabel("Kabul Et").setCustomId("yes")
let no = new Discord.ButtonBuilder().setStyle("Danger").setLabel("Reddet").setCustomId("no")
let row = new Discord.ActionRowBuilder().addComponents(yes).addComponents(no)
interaction.reply({content: opponent.toString(),embeds: [Embed(opponent.tag + " Sana bir savaÅŸ isteÄŸi gÃ¶nderildi. Butonlara basÄ±p iÅŸlem yapabilirsin.","Kabul etmek veya reddetmek iÃ§in 60 saniyen var.","info")], components: [row], ephemeral: false}).catch(err => {})
const filter2 = (i) => (i.customId === "yes" || i.customId === "no") && i.user.id === opponent.id
let int = await interaction.channel.awaitMessageComponent({ filter: filter2, time: 60000 }).catch(err => {
dÃ¶n = 1
			this.fighting.delete(interaction.channel.id);
return interaction.editReply({components: [], content: "1 dakika dolduÄŸu iÃ§in savaÅŸ iptal edildi.", embeds: []})
})
if(int.customId == "no"){
			this.fighting.delete(interaction.channel.id);
return interaction.editReply({components: [], content: "SavaÅŸ reddedildi.", embeds: []})
}
      }
if(dÃ¶n == 1) return;
interaction.reply("Rakip NOOBOT tarafÄ±ndan kontrol edilecektir.").catch(err3 => {
interaction.channel.send("SavaÅŸ kabul edildi. savaÅŸ baÅŸlÄ±yor.")
})
			let userHP = can ? Number(can) : 500;
			let oppoHP = can ? Number(can) : 500;
			let userTurn = false;
			let guard = false;
			const reset = (changeGuard = true) => {
				userTurn = !userTurn;
				if (changeGuard && guard) guard = false;
			};
			const dealDamage = damage => {
				if (userTurn) oppoHP -= damage;
				else userHP -= damage;
			};
			const forfeit = () => {
				if (userTurn) userHP = 0;
				else oppoHP = 0;
			}
			while (userHP > 0 && oppoHP > 0) {
				const user = userTurn ? interaction.user : opponent;
				let choice;
				if (!opponent.bot || (opponent.bot && userTurn)) {
let saldÄ±r = new Discord.ButtonBuilder().setStyle("Primary").setLabel("SaldÄ±r").setCustomId("saldÄ±r")
let savun = new Discord.ButtonBuilder().setStyle("Primary").setLabel("savun").setCustomId("savun")
let ultragÃ¼Ã§ = new Discord.ButtonBuilder().setStyle("Primary").setLabel("Ultra gÃ¼Ã§").setCustomId("ultragÃ¼Ã§")
let kaÃ§ = new Discord.ButtonBuilder().setStyle("Primary").setLabel("KaÃ§").setCustomId("kaÃ§")
let row = new Discord.ActionRowBuilder().addComponents(saldÄ±r).addComponents(savun).addComponents(ultragÃ¼Ã§).addComponents(kaÃ§)
const filter = (i) => (i.customId === "saldÄ±r" || i.customId === "savun" || i.customId === "ultragÃ¼Ã§" || i.customId === "kaÃ§") && i.user.id === user.id
					await interaction.channel.send({content: `
						${user}, ne yapmak istersin? \`saldÄ±r\`, \`savun\`, \`ultra gÃ¼Ã§\`, veya \`kaÃ§\`?
						**${interaction.user.username}**: ${userHP} ðŸ’—
						**${opponent.username}**: ${oppoHP} ðŸ’—
					`, components: [row]});
const turn =  await interaction.channel.awaitMessageComponent({ filter: filter, time: 60000 }).catch(err => {})

					if (!turn || !turn.customId) {
						await interaction.channel.send(`ÃœzgÃ¼nÃ¼m ama, sÃ¼re doldu!`);
						reset();
						continue;
					}
					choice = turn.customId
          ekveri = turn
				} else {
					const choices = ['saldÄ±r', 'savun', 'ultragÃ¼Ã§'];
					choice = choices[Math.floor(Math.random() * choices.length)];
				}
				if (choice === 'saldÄ±r') {
					const damage = Math.floor(Math.random() * (guard ? 10 : 100)) + 1;
if(ekveri.customId){
					await ekveri.reply(`${user}, **${damage}** hasar vurdu!`);
ekveri = {}
} else {
					await interaction.channel.send(`${user}, **${damage}** hasar vurdu!`);
}
					dealDamage(damage);
					reset();
				} else if (choice === 'savun') {
if(ekveri.customId){
					await ekveri.reply(`${user}, kendisini sÃ¼per kalkan ile savundu!`);
ekveri = {}
} else { 
					await interaction.channel.send(`${user}, kendisini sÃ¼per kalkan ile savundu!`);
}
					guard = true;
					reset(false);
				} else if (choice === 'ultragÃ¼Ã§') {
					const miss = Math.floor(Math.random() * 3);
					if (!miss) {
						const damage = Math.floor(Math.random() * ((guard ? 150 : 300) - 100 + 1)) + 100;
if(ekveri.customId){
					await ekveri.reply(`${user}, Ã‡oook uzak galaksilerden gelen ultra sonik enerjiyi yeterki miktarda topladÄ±n ve **${damage}** hasar vurdun!!`);
ekveri = {}
} else {
						await interaction.channel.send(`${user}, Ã‡oook uzak galaksilerden gelen ultra sonik enerjiyi yeterki miktarda topladÄ±n ve **${damage}** hasar vurdun!!`);
}
						dealDamage(damage);
					} else {
if(ekveri.customId){
					await ekveri.reply(`${user}, Ã‡oook uzak galaksilerden gelen ultra sonik enerjiyi yeterli miktarda toplayamadÄ±ÄŸÄ±n iÃ§in ulta gÃ¼Ã§ kullanamadÄ±n!`);
ekveri = {}
} else {
						await interaction.channel.send(`${user}, Ã‡oook uzak galaksilerden gelen ultra sonik enerjiyi yeterli miktarda toplayamadÄ±ÄŸÄ±n iÃ§in ultra gÃ¼cÃ¼ kullanamadÄ±n!`);
}
					}
					reset();
				} else if (choice === 'kaÃ§') {
if(ekveri.customId){
					await ekveri.reply(`${user}, kaÃ§tÄ±! Korkak!`);
ekveri = {}
} else {
	await interaction.channel.send(`${user}, kaÃ§tÄ±! Korkak!`);
}
					forfeit();
					break;
				} else {
return "sa"
					await interaction.channel.send('Ne yapmak istediÄŸini anlamadÄ±m.');
				}
			}
			this.fighting.delete(interaction.channel.id);
            const winner = userHP > oppoHP ? interaction.user : opponent;
			return interaction.channel.send(`Oyun bitti! Tebrikler, **${winner}** kazandÄ±! \n**${interaction.user.username}**: ${userHP} :heartpulse: \n**${opponent.username}**: ${oppoHP} :heartpulse:`);
		} catch (err) {
			this.fighting.delete(interaction.channel.id);
			throw err;
		}
}
}